--Show all customer records

SELECT * FROM customers;

--Show total number of customers

SELECT count(*) FROM customers;

--Show transactions for Chennai market (market code for chennai is Mark001

SELECT * FROM transactions 
where market_code='Mark001';

--Show distrinct product codes that were sold in chennai

SELECT distinct product_code FROM transactions 
where market_code='Mark001';

--Show transactions where currency is US dollars

SELECT * from transactions 
where currency='USD'

--Show transactions in 2020 join by date table

SELECT transactions.*, date.* FROM transactions 
INNER JOIN date 
ON transactions.order_date=date.date 
where date.year=2020;

--Show total revenue in year 2020,

SELECT SUM(transactions.sales_amount) FROM transactions 
INNER JOIN date 
ON transactions.order_date=date.date 
where date.year=2020 and transactions.currency='INR\r' or transactions.currency='USD\r';

--Show total revenue in year 2020, January Month,

SELECT SUM(transactions.sales_amount) FROM transactions 
INNER JOIN date ON transactions.order_date=date.date 
where date.year=2020 and date.month_name='January' and (transactions.currency='INR\r' or transactions.currency='USD\r');

--Show total revenue in year 2020 in Chennai

SELECT SUM(transactions.sales_amount) FROM transactions 
INNER JOIN date 
ON transactions.order_date=date.date 
where date.year=2020 and transactions.market_code='Mark001';

--Total revenue generated each year

SELECT da.year, SUM(sales_amount) AS Revenue_Generated FROM transactions trans
JOIN date da
ON trans.order_date = da.date
GROUP BY da.year
ORDER BY da.year

--Total revenue generated by each market in each year

SELECT markets_name, da.year, SUM(sales_amount) AS Revenue_Generated FROM transactions trans
JOIN markets ma
ON ma.markets_code = trans.market_code
JOIN date da
ON trans.order_date = da.date
WHERE currency in ('INR', 'INR\r')
GROUP BY markets_name, da.year
ORDER BY markets_name, da.year

--Finding any duplicated records

SELECT * , ROW_NUMBER() OVER( partition by order_date order by order_date) as row_no from transactions

--Finding products with most sales

SELECT TOP 10 product_code, SUM(sales_qty) AS Total_Sold FROM transactions
GROUP BY product_code
ORDER BY Total_Sold DESC 

-- Finding which product sold most in each city & finding max amount sold for a product

WITH mark_cte
AS
(
SELECT ma.markets_name, product_code, SUM(sales_qty) AS Total_Sold
FROM transactions tr
JOIN markets ma
ON ma.markets_code = tr.market_code
GROUP BY ma.markets_name, product_code
--ORDER BY Total_Sold DESC, markets_name
)
SELECT markets_name, product_code, Total_Sold
FROM mark_cte
WHERE Total_Sold = ( SELECT MAX(Total_Sold) FROM mark_cte)

--Finding which product generated most revenue in each city & finding max revenue generated by a product

WITH mark_cte
AS
(
SELECT ma.markets_name, product_code, SUM(sales_amount) AS Revenue_Generated
FROM transactions tr
JOIN markets ma
ON ma.markets_code = tr.market_code
GROUP BY ma.markets_name, product_code
--ORDER BY Revenue_Generated DESC, markets_name
)
SELECT markets_name, product_code, Revenue_Generated
FROM mark_cte
WHERE Revenue_Generated = ( SELECT MAX(Revenue_Generated) FROM mark_cte)


--Finding the date when the max sales amount was generated

SELECT product_code, order_date, sales_amount
FROM transactions 
WHERE sales_amount = (SELECT MAX(sales_amount) FROM transactions) 

--Finding different currencies in the database

SELECT DISTINCT currency FROM transactions

--Revenue by each currency

SELECT currency, SUM(sales_amount) AS Revenue_Generated FROM transactions
GROUP BY currency

-- Revenue by Month and Year

SELECT YEAR(order_date) AS [Year], MONTH(order_date) AS [Month], SUM(sales_amount) as Revenue_Generated
FROM transactions
WHERE YEAR(order_date) = 2018 AND MONTH(order_date) = 3
GROUP BY YEAR(order_date), MONTH(order_date)
